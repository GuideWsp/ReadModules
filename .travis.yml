language: c++

os:
  - linux
  # - osx

compiler:
  - gcc
  - clang

sudo: required
dist: trusty

before_script:
  - if [ "$TRAVIS_OS_NAME" = "linux" ];then  MODULE_CMAKE_ARGS="-DENABLE_BINARIZATION=true -DENABLE_WRITERIDENTIFICATION=true -DENABLE_LAYOUT=true -DENABLE_PAGE_VIS=true -DENABLE_SKEW=true"; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then MODULE_CMAKE_ARGS="-DENABLE_BINARIZATION=true -DENABLE_WRITERIDENTIFICATION=true -DENABLE_LAYOUT=true -DENABLE_PAGE_VIS=true -DENABLE_SKEW=true"; fi

  # # OSX dependencies
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew update; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install qt5; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then CMAKE_ARGS="-DCMAKE_PREFIX_PATH=/usr/local/opt/qt5 -Dnomacs_DIR=/Users/travis/build/TUWien/ReadModules/build/nomacs-build -DReadFramework_DIR=/Users/travis/build/TUWien/ReadModules/build/readframework-build"; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install exiv2; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install libraw; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew tap homebrew/science; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install opencv3 --with-contrib --without-eigen --without-opencl --without-openexr --without-python --without-tests; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew ln opencv3 --force; fi

  # Linux dependencies
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-add-repository -y ppa:beineri/opt-qt551-trusty; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-add-repository -y ppa:sfiel/opencv-read; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get update; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y --no-install-recommends debhelper cdbs libopencv-dev libopencv-stitching-dev libopencv-imgcodecs-dev libopencv-flann-dev libopencv-features2d-dev libopencv-calib3d-dev libopencv-hdf-dev libopencv-reg-dev libopencv-shape-dev libopencv-xobjdetect-dev libopencv-xfeatures2d-dev libopencv-ximgproc-dev libopencv-highgui-dev cmake qt55tools qt55svg qt55base libtbb-dev libwebp-dev libbz2-dev libv4l-dev libexiv2-dev libraw-dev libhdf5-dev; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then CMAKE_ARGS="-DCMAKE_PREFIX_PATH=/opt/qt55/bin/ -Dnomacs_DIR=~/build/TUWien/ReadModules/build/nomacs-build -DReadFramework_DIR=~/build/TUWien/ReadModules/build/readframework-build"; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install --yes doxygen graphviz; fi

  - git clone --depth 1 http://github.com/nomacs/nomacs nomacs
  - git clone --depth 1 http://github.com/TUWien/ReadFramework ReadFramework
  - mkdir build
  - cd build
  - mkdir nomacs-build
  - mkdir readframework-build

script:
  - cd nomacs-build
  - cmake $CMAKE_ARGS ../../nomacs/ImageLounge
  - make -j8
  - cd ../readframework-build
  - cmake $CMAKE_ARGS ../../ReadFramework
  - make -j8
  - cd ..
  - cmake $CMAKE_ARGS $MODULE_CMAKE_ARGS ../.
  - make -j8 VERBOSE=1
before_install:
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then openssl aes-256-cbc -K $encrypted_d495a65dd077_key -iv $encrypted_d495a65dd077_iv -in config/travisci_rsa.enc -out config/travisci_rsa -d; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then chmod 0600 config/travisci_rsa; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then cp config/travisci_rsa ~/.ssh/id_rsa; fi
after_success:
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then cd ..; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then ./config/publish-doxygen; fi
